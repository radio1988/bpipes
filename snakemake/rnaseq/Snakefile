SAMPLES=["S1", "S2"]
GENOME="/project/umw_mccb/genome/Homo_sapiens/ucsc_hg38_primary/hg38.primary.fa"
INDEX="/project/umw_mccb/genome/Homo_sapiens/ucsc_hg38_primary/star_idx"
GTF="/project/umw_mccb/genome/Homo_sapiens/ucsc_hg38_primary/gencode.v29.primary_assembly.annotation.fixed.gtf"
THREADS=12

# load modules (have to use """, to keep in one block)
# - alias does not work, have to use $samstat
shell.prefix("""
            # fastqc
            module load fastqc/0.11.5
            module load python3/3.5.0_packages/multiqc/1.4
            # star
            module load java/1.8.0_77
            module load star/2.5.3a
            #module load samtools/dev-2016_06_06
            samtools="singularity exec $HOME/singularity/hand_sandbox samtools"
            samstat="singularity exec $HOME/singularity/hand_sandbox samstat"
            """)

# Requirements
# inputs in ./fastq/xxx.{fastq,fq}.gz
# named as {sample}.{R1,R2}.{fastq,fq}.gz

# SnakeMake Coding Notes:
# input don't have to be used, just for draw nice DAG

rule all:
    input:
        # just for check exist, and aggregate, feed {sample}
        #fastqc=expand("fastqc/{sample}_fastqc.html", sample=SAMPLES),
        fastqc="fastqc/multiqc_report.html",
        bam_qc=expand("bam_qc/samstat/{sample}.bam.samstat.html", sample=SAMPLES) # assign {samples}
    output:
        "dag.all.svg"
    run:
        # creating DAG works (specify report or last_step as target)
        shell("snakemake --dag all | dot -Tsvg > {output}") 
        # create report failed, because log not finished, have to do this later manually
        # shell("snakemake report --report report.html")

rule fastqc:
    # don't need input/output, so no check on them
    # without output will not create output folder
    output:
        "fastqc/multiqc_report.html"
    threads:
        THREADS
    shell:
        # {output} don't have to be in command
        # have to load module in one block
        """
        mkdir -p fastqc
        mkdir -p fastqc/details
        fastqc -t {threads} fastq/*q.gz -o fastqc/details
        multiqc fastqc/details -o fastqc
        """

rule star_map:
    input:
        index=INDEX,
        gtf=GTF,
        reads="fastq/{sample}.fastq.gz"
    threads:
        THREADS
    output:
        "mapped_reads/{sample}.bam"
    shell:
        # align; rename
        """STAR --runThreadN {threads} \
        --genomeDir {input.index} \
        --sjdbGTFfile {input.gtf} \
        --readFilesCommand zcat \
        --readFilesIn {input.reads} \
        --outFileNamePrefix mapped_reads/{wildcards.sample}. \
        --outFilterType BySJout \
        --outFilterMultimapNmax 20 \
        --alignSJoverhangMin 8 \
        --alignSJDBoverhangMin 3 \
        --outFilterMismatchNmax 999 \
        --outFilterMismatchNoverReadLmax 0.05 \
        --alignIntronMin 20 \
        --alignIntronMax 1000000 \
        --alignMatesGapMax 1000000 \
        --outFilterIntronMotifs RemoveNoncanonicalUnannotated \
        --outSAMstrandField None \
        --outSAMtype BAM Unsorted \
        --quantMode GeneCounts \
        --outReadsUnmapped Fastx \
        && mv mapped_reads/{wildcards.sample}*.out.bam mapped_reads/{wildcards.sample}.bam
        """


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    threads:
        THREADS
    run:
        # -T for temp files prefix
        #shell("samtools sort -@ 2 -T sorted_reads/{wildcards.sample} {input} -o {output}")
        #shell("echo {wildcards.sample}")
        shell("$samtools sort -@ {threads} -m 1G {input} -o sorted_reads/{wildcards.sample}.bam")

rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "$samtools index {input}"

rule bam_qc:
    input:
        bam="sorted_reads/{sample}.bam",
        bai="sorted_reads/{sample}.bam.bai"
    output:
        "bam_qc/samstat/{sample}.bam.samstat.html"
    shell:
        """
        mkdir -p bam_qc 
        mkdir -p bam_qc/idxstats
        mkdir -p bam_qc/flagstat
        mkdir -p bam_qc/stats
        mkdir -p bam_qc/samstat
        $samtools idxstats {input.bam} > bam_qc/idxstats/{wildcards.sample}.idxstats.txt
        $samtools flagstat {input.bam} > bam_qc/flagstat/{wildcards.sample}.flagsat.txt
        $samtools stats {input.bam} > bam_qc/stats/{wildcards.sample}.stats.txt
        $samstat {input.bam} && mv sorted_reads/{wildcards.sample}*.samstat.html bam_qc/samstat
        """
