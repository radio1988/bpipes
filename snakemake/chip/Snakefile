configfile: "config.yaml"
SAMPLES=config["SAMPLES"]
GENOME=config["GENOME"]
INDEX=GENOME+".sa"
MQ_MIN=config["MQ_MIN"]
BIN_SIZE=config['BIN_SIZE']

# load modules (have to use """, to keep in one block)
# - alias does not work, have to use $samstat
shell.prefix("""
            module load fastqc/0.11.5
            module load python3/3.5.0_packages/multiqc/1.4
            module load bwa/0.7.15
            module load picard/2.17.8
            PICARD=/share/pkg/picard/2.17.8/picard.jar
            samtools="singularity exec $HOME/singularity/hand_sandbox samtools"
            samstat="singularity exec $HOME/singularity/hand_sandbox samstat"
            """)

# Requirements
# inputs in ./fastq/
# named as {sample}.{R1,R2}.{fastq,fq}.gz
# e.g. A.R1.fastq.gz A.R2.fastq.gz B...


rule all:
    input:
        # 1. everything listed here will be produced by the pipeline
        # 2. feed {sample}
        fastqc="fastqc/multiqc_report.html", # not in main workflow, so list here
        bam_qc=expand("bam_qc/samstat/{sample}.bam.samstat.html", sample=SAMPLES), # feed {samples}, ensure aligment 
        insert_size=expand("bam_qc/{sample}.insert_size.pdf", sample=SAMPLES),
        bamCoverage=expand("bigWig/{sample}.cpm.bw", sample=SAMPLES),
        plotFingerprint="chip_qc/fingerprint.pdf",
        plotCorrelation="chip_qc/multiBamSummary.heatmap.pdf",
        bamPEFragmentSize="chip_qc/fragment_size.pdf",
        dag="Workflow_DAG.all.svg", # create DAG


rule fastqc:
    # don't need input, if you agree on not checking them
    # without output, output will not be created
    output:
        "fastqc/multiqc_report.html"
    params:
        mem="1000"
    threads:
        8
    log:
        "log/fastqc/fastqc.log"
    shell:
        # {input/output} don't have to be in command
        # have to load module in one block
        """
        mkdir -p fastqc
        mkdir -p fastqc/details
        fastqc -t {threads} fastq/*q.gz -o fastqc/details &> {log}
        multiqc fastqc/details -o fastqc &>> {log}
        """


rule bwa_index:
    input:
        GENOME
    output:
        INDEX
    shell:
        """
        bwa index -a bwtsw {input} &> {log}
        """


rule bwa_map:
    input:
        index=INDEX,
        r1="fastq/{sample}.R1.fastq.gz",
        r2="fastq/{sample}.R2.fastq.gz",
    output:
        temp("mapped_reads/{sample}.bam")
    params:
        mem="1500"  # todo auto adjust based on {threads}, for human need 18G+ 
    threads:
        16
    log:
        "log/bwa_map/{sample}.bwa.log"
    shell:
        """
        bwa mem -t {threads} {GENOME} \
        {input.r1} {input.r2} \
        | $samtools view -Sb - -o {output} &> {log}
        """


rule samtools_sort_index:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    params:
        mem="1200"
    threads:
        4
    log:
        "log/samtools_sort/{sample}.sort.log"
    run:
        shell("$samtools sort -@ {threads} -m 1G {input} -o {output} &> {log}")
        shell("$samtools index {output} &> {log}")


rule bam_qc:
    input:
        bam="sorted_reads/{sample}.bam"
    output:
        "bam_qc/samstat/{sample}.bam.samstat.html"
    params:
        mem="2000"
    threads:
        6
    log:
        idxstats="log/bam_qc/idxstats/{sample}.idxstats.log",
        flagstat="log/bam_qc/flagstat/{sample}.flagstat.log",
        stats="log/bam_qc/stats/{sample}.stats.log",
        samstat="log/bam_qc/samstat/{sample}.samstat.log",
    shell:
        """
        mkdir -p bam_qc 
        mkdir -p bam_qc/idxstats
        mkdir -p bam_qc/flagstat
        mkdir -p bam_qc/stats
        mkdir -p bam_qc/samstat
        $samtools idxstats {input.bam} > bam_qc/idxstats/{wildcards.sample}.idxstats.txt 2> {log.idxstats} &
        $samtools flagstat {input.bam} > bam_qc/flagstat/{wildcards.sample}.flagsat.txt 2> {log.flagstat} &
        $samtools stats {input.bam} > bam_qc/stats/{wildcards.sample}.stats.txt 2> {log.stats} &
        $samstat {input.bam} && mv sorted_reads/{wildcards.sample}*.samstat.html bam_qc/samstat > {log.samstat} 2>&1 
        """

rule markDup:
    input:
        "sorted_reads/{sample}.bam"
    output:
        bam="markDup/{sample}.bam",
        metrics="markDup/{sample}.markDup_metrics.txt",
        bai="markDup/{sample}.bam.bai"
    log:
        "log/markDup/{sample}.markDup.log"
    threads:
        2
    params:
        mem="16000"
    shell:
        """
        java -Xmx30g -jar $PICARD MarkDuplicates \
        I={input} \
        O={output.bam} \
        M={output.metrics} \
       	REMOVE_DUPLICATES=true \
        ASSUME_SORTED=true \
        &> {log}

        $samtools index {output.bam} &>> {log}
        """

rule bamCoverage:
    # for ChIP
    input:
        "markDup/{sample}.bam"
    output:
        "bigWig/{sample}.cpm.bw"
    threads:
        12
    params:
        mem="1000"  # total 6-10G
    log:
        "log/bamCoverage/{sample}.bamCoverage.log"
    shell:
        # Aim: same as our downstream filters, extensions
        """
        bamCoverage --bam {input} \
        -o  {output} \
        --numberOfProcessors {threads} \
        --outFileFormat bigwig \
        --normalizeUsing CPM \
        --minFragmentLength {config['minFragmentLength']} \
        --maxFragmentLength {config['maxFragmentLength']} \
        --binSize 10 \
        -e 150 &> {log}
        """


rule plotFingerprint:
    input:
        expand("markDup/{sample}.bam", sample=SAMPLES)
    output:
        plot="chip_qc/fingerprint.pdf",
        txt="chip_qc/fingerprint.txt",
    params:
        mem="2000"
    threads:
        6
    log:
        "log/chip_qc/fingerprint.log"
    shell:
        """
        plotFingerprint -b {input} \
            --plotFile {output.plot} \
            --outRawCounts {output.txt} \
            --plotTitle "Fingerprint Plot" \
            --smartLabels \
            --minMappingQuality {MQ_MIN} \
            --binSize {BIN_SIZE} \
            --minFragmentLength {config['minFragmentLength']} \
            --maxFragmentLength {config['maxFragmentLength']} \
            --extendReads \
            --centerReads \
            --samFlagInclude 2 \
            -p {threads} &> {log}
        """
        # --samFlagInclude 2: mate properly paired only
        # --extendReads: use mate into


rule bamPEFragmentSize:
    input:
        expand("markDup/{sample}.bam", sample=SAMPLES)
    output:
        plot="chip_qc/fragment_size.pdf",
        txt="chip_qc/fragment_size.txt"
    params:
        mem="2000"
    threads:
        4
    log:
        "log/chip_qc/fragment_size.log"
    shell:
        """
        bamPEFragmentSize \
        -hist {output.plot} \
        --outRawFragmentLengths {output.txt} \
        -T "Fragment Size Distribution" \
        --maxFragmentLength 1500 \
        -b {input} \
        -p {threads} &> {log}
        """


rule multiBamSummary:
    input:
        expand("markDup/{sample}.bam", sample=SAMPLES)
    output:
        "chip_qc/multiBamSummary.npz",
    threads:
        12
    params:
        mem="1500"
    log:
        "log/chip_qc/multiBamSummary.log"
    shell:
        """
        multiBamSummary bins \
        -b {input} \
        -o {output} \
        --binSize {BIN_SIZE} \
        --smartLabels \
        -p {threads} \
        --minMappingQuality {MQ_MIN} \
        --minFragmentLength {config['minFragmentLength']} \
        --maxFragmentLength {config['maxFragmentLength']} \
        -e \
        --samFlagInclude 2 &> {log}
        """
        

rule plotCorrelation:
    input:
        "chip_qc/multiBamSummary.npz",
    output:
        "chip_qc/multiBamSummary.heatmap.pdf"
    threads:
        6
    params:
        mem="1500"
    log:
        "log/chip_qc/plotCorrelation.log"
    shell:
        """
        plotCorrelation \
        -in {input} \
        --corMethod pearson --skipZeros \
        --whatToPlot heatmap \
        -T 'Pearson Corr Between Bins' \
        --removeOutliers \
        -o {output} &> {log}
        """

rule CollectInsertSizeMetrics:
    input:
        "sorted_reads/{sample}.bam"
    output:
        txt="bam_qc/{sample}.insert_size.txt",
        pdf="bam_qc/{sample}.insert_size.pdf"
    threads:
        1
    params:
        mem="16000"
    shell:
        """
        java -Xmx15g -jar $PICARD CollectInsertSizeMetrics \
        I={input} \
        O={output.txt} \
        H={output.pdf}
        """ 

rule create_dag:
    params:
        mem="1000"  
        # every job has to have this defined 
        # to use snakemake --cluster 'bsub -q short -R "rusage[mem={params.mem}]" -n {threads}'
    threads:
        1
    output:
        "Workflow_DAG.all.svg"
    log:
        "log/create_dag/Workflow_DAG.all.svg.log"
    shell:
        "snakemake --dag all | dot -Tsvg > {output} 2> {log}"
