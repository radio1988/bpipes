# Feb 28, 2021
# Modified from DamID pipeline
# Functions: 
    # fastqc
    # map, filter, bamqc
# Env: 
    # source activate damid
# Requirements
    # inputs in ./fastq/
    # named as {sample}.{R1,R2}.{fastq,fq}.gz
    # e.g. A.R1.fastq.gz A.R2.fastq.gz B...
    # good format of meta.csv and contrast.csv, matching SAMPLES in config.yaml


### parse and prepare
from snakemake.utils import min_version
from genome_enrichment_qc_modules import parse_meta_contrast, get_treatment_bams_from_contrast, \
    get_control_bams_from_contrast, get_contrast_name_from_contrast, \
    get_treat_pileup_bdg_names_from_contrasts, get_treat_pileup_bw_names_from_contrasts
# min_version("6.0")

configfile: "config/config.yaml"

SAMPLES=config["SAMPLES"]
GENOME=config["GENOME"]
INDEX=GENOME+".sa"
MQ_MIN=config["MQ_MIN"]
BIN_SIZE=config["BIN_SIZE"]
GSIZE=config["GSIZE"]
SizeFile=config["SizeFile"]
chrM=config["chrM"]
TYPE=config['TYPE'] 
BAM_FOLDERS=config['BAM_FOLDERS']
minFragmentLength=config['minFragmentLength']
maxFragmentLength=config['maxFragmentLength']
START=config['START']

o=parse_meta_contrast(fmeta="./config/meta.csv", fcontrast="./config/contrast.csv") 

shell.prefix("""
            HOME=/home/rl44w/
            #bedGraphToBigWig="singularity exec $HOME/singularity/hand_sandbox.simg bedGraphToBigWig"
            """)

### Workflow
if START == 'FASTQ':
    rule targets:
        input:
            # 1. everything listed here will be produced by the pipeline
            # 2. feed {sample}
            # Learn: Good trick to use tagets input to do contrast2contrast_name and more
            fastqc="results/fastqc/multiqc_report.html", # not in main workflow, so list here
         #   align=expand("results/sorted_reads/{sample}.bam", sample=SAMPLES),
         #   markDup=expand("results/markDup/{sample}.bam.bai", sample=SAMPLES),
         #   cleanBam=expand("results/cleanBam/{sample}.bam", sample=SAMPLES),
            cleanBamBw=expand("results/cleanBam/bigWig/{sample}.cpm.bw", sample=SAMPLES),
            bamqc=expand("results/{bam_folder}/bamqc/stats_multiqc_report.html", bam_folder=BAM_FOLDERS),
            markDup_multiqc="results/markDup/multiqc/markDup_metrics_multiqc_report.html",
            chipqc1=expand("results/{bam_folder}/chipqc/fingerprint.pdf", bam_folder=BAM_FOLDERS),
            chipqc2=expand("results/{bam_folder}/chipqc/fragment_size.pdf", bam_folder=BAM_FOLDERS),
            chipqc3=expand("results/{bam_folder}/chipqc/multiBamSummary.heatmap.pdf", bam_folder=BAM_FOLDERS),
            chipqc4=expand("results/{bam_folder}/chipqc/multiBamSummary.pca.pdf", bam_folder=BAM_FOLDERS),
            chipqc5=expand("results/{bam_folder}/chipqc/details/{sample}.insert_size.pdf", 
                bam_folder=BAM_FOLDERS, sample=SAMPLES),
            #macs2_DamID_contrast=get_treat_pileup_bdg_names_from_contrasts(contrasts=o.contrasts, o=o), 
            #macs2_DamID_contrast_treat_pileup_bw=get_treat_pileup_bw_names_from_contrasts(contrasts=o.contrasts, o=o),
            dag="Workflow_DAG.all.svg"
else:
    rule targets:
        input:
            bamqc=expand("results/{bam_folder}/bamqc/stats_multiqc_report.html", bam_folder=BAM_FOLDERS),
            chipqc1=expand("results/{bam_folder}/chipqc/fingerprint.pdf", bam_folder=BAM_FOLDERS),
            chipqc2=expand("results/{bam_folder}/chipqc/fragment_size.pdf", bam_folder=BAM_FOLDERS),
            chipqc3=expand("results/{bam_folder}/chipqc/multiBamSummary.heatmap.pdf", bam_folder=BAM_FOLDERS),
            chipqc4=expand("results/{bam_folder}/chipqc/multiBamSummary.pca.pdf", bam_folder=BAM_FOLDERS),
            chipqc5=expand("results/{bam_folder}/chipqc/details/{sample}.insert_size.pdf", 
                bam_folder=BAM_FOLDERS, sample=SAMPLES),
            dag="Workflow_DAG.all.svg"
    


rule fastqc:
    # don't need input, if you agree on not checking them
    # without output, output will not be created
    output:
        "results/fastqc/multiqc_report.html"
    threads:
        8
    params:
        mem="1000"
    log:
        "results/fastqc/fastqc.log"
    shell:
        # {input/output} don't have to be in command
        """
        mkdir -p results/fastqc results/fastqc/details
        fastqc -t {threads} fastq/*q.gz -o results/fastqc/details &> {log}
        multiqc results/fastqc/details -o results/fastqc &>> {log}
        """

rule bwa_index:
    input:
        GENOME
    output:
        INDEX
    threads:
        2
    params:
        mem="8000"
    log:
        INDEX + '.log'
    shell:
        """
        bwa index -a bwtsw {input} &> {log}
        """

rule bwa:
    # 1min/1M reads with 16 cores
    input:
        index=INDEX,
        r1="fastq/{sample}.R1.fastq.gz",
        r2="fastq/{sample}.R2.fastq.gz",
    output:
        temp("results/mapped_reads/{sample}.bam")
    threads:
        16
    params:
        mem="1500"  # todo auto adjust based on {threads}, for human need 18G+ 
    log:
        "results/mapped_reads/log/{sample}.bam.log"
    benchmark:
        "results/mapped_reads/log/{sample}.bam.benchmark"
    shell:
        """
        bwa mem -t {threads} {GENOME} \
        {input.r1} {input.r2} \
        2> {log}| samtools view -Sb -1 -@ 2 - -o {output} &>> {log}
        """

rule sort_index:
    # 2M/min
    input:
        "results/mapped_reads/{sample}.bam"
    output:
        "results/sorted_reads/{sample}.bam"
    threads:
        4
    params:
        mem="2000"
    log:
        "results/sorted_reads/log/{sample}.bam.log"
    shell:
        """
        samtools --version &> {log}
        samtools sort -@ {threads} -m 1G {input} -o {output} &>> {log}
        samtools index {output} &>> {log}
        """

rule markDup:
    # same speed as bwa_map, slow
    input:
        "results/sorted_reads/{sample}.bam"
    output:
        bam=temp("results/markDup/{sample}.bam"),
        bai="results/markDup/{sample}.bam.bai",
        metrics="results/markDup/details/{sample}.markDup_metrics.txt",
    threads:
        1
    params:
        mem="16000",  # Used Max of 24G before
    log:
        "results/markDup/log/{sample}.bam.log"
    benchmark:
        "results/markDup/log/{sample}.bam.benchmark"
    shell:
        """        
        rm -f {output.bai} {output.metrics}
        picard MarkDuplicates \
        I={input} \
        O={output.bam} \
        M={output.metrics} \
        REMOVE_DUPLICATES=true \
        ASSUME_SORTED=true \
        &> {log}

        samtools index {output.bam} &>> {log}
        """

rule markDup_multiqc:
    # same speed as bwa_map, slow
    input:
        expand("results/markDup/details/{sample}.markDup_metrics.txt", sample=SAMPLES)
    output:
        "results/markDup/multiqc/markDup_metrics_multiqc_report.html"
    threads:
        1
    params:
        mem="6000",  # Used Max of 24G before
    log:
        "results/markDup/multiqc/log/markDup_metrics_multiqc_report.log"
    benchmark:
        "results/markDup/multiqc/log/markDup_metrics_multiqc_report.benchmark"
    shell:
        """        
        multiqc -f {input} -o results/markDup/multiqc -i markDup_metrics &> {log}
        """

rule cleanBam:
    '''
    Tag: Different in ChIPseq and ATACSeq
    '''
    input:
        "results/markDup/{sample}.bam"
    output:
        "results/cleanBam/{sample}.bam"
    threads:
        2
    params:
        mem="8000"
    log:
        "results/cleanBam/log/{sample}.bam.log"
    benchmark:
        "results/cleanBam/log/{sample}.bam.benchmark"
    shell:
        """
        if [ {config[TYPE]} = 'atac' ]; then
            echo 'ATACseq mode'
            echo {input}
            echo 'remove mito reads; keep paired reads with MQ>20 and 38-2000nt fragment size only'
            samtools view -h {input} 2>{log}| perl -lane 'print unless ($F[2] eq {chrM} and $_ != /\@/)' 2>>{log}| awk \'{config[filter]}\' 2>>{log}| $samtools sort -m 8G -o {output}  2>> {log}
        elif [ {config[TYPE]} = 'chip' ]; then
            echo 'ChIPseq mode'
            echo 'No filtering'
            ln {input} {output}
        elif [ {config[TYPE]} = 'damid' ]; then
            echo 'DamID mode'
            echo '#todo'
            exit
        fi

        samtools index {output} &> {log}
        """

rule bamCoverage_ext:
    '''
    # for ChIP
    extend mode used, good for PE, and SE ChIP
    not good for some technique that pinpoints signal at the end of fragments
    '''
    input:
        "results/cleanBam/{sample}.bam"
    output:
        "results/cleanBam/bigWig/{sample}.cpm.bw"
    threads:
        8
    params:
        mem="1500"  # total 6-10G
    log:
        "results/cleanBam/bigWig/{sample}.cpm.bw.log"
    benchmark:
        "results/cleanBam/bigWig/{sample}.cpm.bw.benchmark"
    shell:
        # Aim: same as our downstream filters, extensions
        """
        bamCoverage --bam {input} \
        -o  {output} \
        --numberOfProcessors {threads} \
        --outFileFormat bigwig \
        --normalizeUsing CPM \
        --minFragmentLength {config[minFragmentLength]} \
        --maxFragmentLength {config[maxFragmentLength]} \
        --binSize 50 \
        -e 150 &> {log}
        """

rule bamqc:
    input:
        bam="results/{bam_folder}/{sample}.bam"
    output:
        idxstats="results/{bam_folder}/bamqc/idxstats/{sample}.idxstats.txt",
        flagstat="results/{bam_folder}/bamqc/flagstat/{sample}.flagstat.txt",
        stats="results/{bam_folder}/bamqc/stats/{sample}.stats.txt"
    threads:
        1
    params:
        mem="4000"
    log:
        idxstats="results/{bam_folder}/bamqc/idxstats/log/{sample}.idxstats.txt.log",
        flagstat="results/{bam_folder}/bamqc/flagstat/log/{sample}.flagstat.txt.log",
        stats="results/{bam_folder}/bamqc/stats/log/{sample}.stats.txt.log"
    benchmark:
        "results/{bam_folder}/bamqc/benchmark/{sample}.bamqc.benchmark",
    shell:
        """
        samtools idxstats {input.bam} > {output.idxstats} 2> {log.idxstats}
        samtools flagstat {input.bam} > {output.flagstat} 2> {log.flagstat}
        samtools stats {input.bam} > {output.stats} 2> {log.stats}
        """

rule bam_multiqc:
    input:
        idxstats=[("results/{bam_folder}/bamqc/idxstats/" + s + ".idxstats.txt") for s in SAMPLES],
        flagstat=[("results/{bam_folder}/bamqc/flagstat/" + s + ".flagstat.txt") for s in SAMPLES],
        stats=[("results/{bam_folder}/bamqc/stats/" + s + ".stats.txt") for s in SAMPLES]
    output:
        "results/{bam_folder}/bamqc/idxstats_multiqc_report.html",
        "results/{bam_folder}/bamqc/flagstat_multiqc_report.html",
        "results/{bam_folder}/bamqc/stats_multiqc_report.html",
    threads:
        1
    params:
        mem="3000"
    log:
        "results/{bam_folder}/bamqc/bamqc.log",
    shell:
        """
        multiqc -f {input.idxstats} -o results/{wildcards.bam_folder}/bamqc -i  idxstats &> {log}
        multiqc -f {input.flagstat} -o results/{wildcards.bam_folder}/bamqc -i  flagstat &>> {log}
        multiqc -f {input.stats} -o results/{wildcards.bam_folder}/bamqc -i stats  &>> {log}
        """

# ChIPQC

rule plotFingerprint:
    input:
        [("results/{bam_folder}/" + s + ".bam") for s in SAMPLES],
    output:
        plot="results/{bam_folder}/chipqc/fingerprint.pdf",
        txt="results/{bam_folder}/chipqc/fingerprint.txt",
    threads:
        6
    params:
        mem="2000"
    log:
        "results/{bam_folder}/chipqc/log/fingerprint.log",
    benchmark:
        "results/{bam_folder}/chipqc/log/fingerprint.benchmark",
    shell:
        """
        plotFingerprint -b {input} \
            --plotFile {output.plot} \
            --outRawCounts {output.txt} \
            --plotTitle "Fingerprint Plot" \
            --smartLabels \
            --minMappingQuality {MQ_MIN} \
            --binSize {BIN_SIZE} \
            --minFragmentLength {config[minFragmentLength]} \
            --maxFragmentLength {config[maxFragmentLength]} \
            --extendReads \
            --centerReads \
            --samFlagInclude 2 \
            -p {threads} &> {log}
        """
        # --samFlagInclude 2: mate properly paired only
        # --extendReads: use mate into  #todo: diff mode for chip, atac


rule bamPEFragmentSize:
    input:
        [("results/{bam_folder}/" + s + ".bam") for s in SAMPLES],
    output:
        plot="results/{bam_folder}/chipqc/fragment_size.pdf",
        txt="results/{bam_folder}/chipqc/fragment_size.txt"
    threads:
        8
    params:
        mem="4000"
    log:
        "results/{bam_folder}/chipqc/log/fragment_size.log",
    benchmark:
         "results/{bam_folder}/chipqc/log/fragment_size.benchmark",
    shell:
        """
        conda deactivate &&  conda deactivate
        source /share/pkg/condas/2018-05-11/bin/activate && conda activate deeptools_3.0.2_py36_0
        source activate py27  # todo: env
        bamPEFragmentSize \
        -hist {output.plot} \
        --outRawFragmentLengths {output.txt} \
        -T "Fragment Size Distribution" \
        --maxFragmentLength 2000 \
        -b {input} \
        -p {threads} &> {log}
        """


rule multiBamSummary:
    input:
        [("results/{bam_folder}/" + s + ".bam") for s in SAMPLES],
    output:
        "results/{bam_folder}/chipqc/multiBamSummary.npz",
    threads:
        8
    params:
        mem="3500"
    log:
        "results/{bam_folder}/chipqc/log/multiBamSummary.npz.log"
    benchmark:
        "results/{bam_folder}/chipqc/log/multiBamSummary.npz.benchmark"
    shell:
        """
        multiBamSummary bins \
        -b {input} \
        -o {output} \
        --binSize {BIN_SIZE} \
        --smartLabels \
        -p {threads} \
        --minMappingQuality {MQ_MIN} \
        --minFragmentLength {minFragmentLength} \
        --maxFragmentLength {maxFragmentLength} \
        -e \
        --samFlagInclude 2 &> {log}
        """
        

rule plotCorrelation:
    input:
        "results/{bam_folder}/chipqc/multiBamSummary.npz",
    output:
        "results/{bam_folder}/chipqc/multiBamSummary.heatmap.pdf"
    threads:
        1
    params:
        mem="20000"
    log:
        "results/{bam_folder}/chipqc/log/multiBamSummary.heatmap.log"
    benchmark:
        "results/{bam_folder}/chipqc/log/multiBamSummary.heatmap.benchmark"
    shell:
        """
        plotCorrelation \
        -in {input} \
        --corMethod pearson --skipZeros \
        --whatToPlot heatmap \
        -T 'Pearson Corr Between Bins' \
        --removeOutliers \
        -o {output} &> {log}
        """

rule plotPCA:
    input:
        "results/{bam_folder}/chipqc/multiBamSummary.npz",
    output:
        "results/{bam_folder}/chipqc/multiBamSummary.pca.pdf"
    threads:
        1
    params:
        mem="20000"
    log:
        "results/{bam_folder}/chipqc/log/multiBamSummary.pca.log"
    benchmark:
        "results/{bam_folder}/chipqc/log/multiBamSummary.pca.benchmark"
    shell:
        """
        plotPCA \
        --corData {input} \
        --plotFile {output} &> {log}
        """

rule CollectInsertSizeMetrics:
    input:
        "results/{bam_folder}/{sample}.bam"
    output:
        txt="results/{bam_folder}/chipqc/details/{sample}.insert_size.txt",
        pdf="results/{bam_folder}/chipqc/details/{sample}.insert_size.pdf"
    threads:
        1
    params:
        mem="16000"
    log:
        "results/{bam_folder}/chipqc/details/log/{sample}.insert_size.pdf.log"
    benchmark:
        "results/{bam_folder}/chipqc/details/log/{sample}.insert_size.pdf.benchmark"
    shell:
        """
        module load picard/2.17.8
        PICARD=/share/pkg/picard/2.17.8/picard.jar

        java -Xmx15g -jar $PICARD CollectInsertSizeMetrics \
        I={input} \
        O={output.txt} \
        H={output.pdf}
        """ 

### March5, 2021, Call peaks
rule macs2_contrast:
    """
    For each contrast

    MACS2: 
    will concatenate all control bam files and treatment bam files anyway, 
    so no need to collapse tech-reps
    """
    input:
        treatment=lambda wildcards: get_treatment_bams_from_contrast(contrast=wildcards.contrast, o=o, root="results/cleanBam/"),
        control=lambda wildcards: get_control_bams_from_contrast(contrast=wildcards.contrast, o=o, root="results/cleanBam/"),
    output:
        # lambda wildcards: get_contrast_name_from_contrast(contrast=wildcards.contrast)
        # "macs2_contrast/{contrast}/{contrast_name}_peaks.narrowPeak", 
        # # e.g. "macs2_contrast/contrast1/G1_vs_ctrl_peaks.narrowPeak"
        temp("results/macs2_contrast/{contrast}/{contrast_name}_treat_pileup.bdg"),
        temp("results/macs2_contrast/{contrast}/{contrast_name}_control_lambda.bdg")
    params:
        contrast_name=lambda wildcards: get_contrast_name_from_contrast(contrast=wildcards.contrast, o=o),
        macs2_contrast_params="-f BAM -q 0.01 --keep-dup all",
        mem="8000"
    threads:
        4        
    conda:
        "envs/macs2.yaml"
    log:
        "results/macs2_contrast/{contrast}/{contrast_name}.macs2_DamID.log"
    benchmark:
        "results/macs2_contrast/{contrast}/{contrast_name}.macs2_DamID.tsv"
    shell:
        """
        macs2 callpeak -t {input.treatment} -c {input.control} -g {GSIZE} \
        {params.macs2_contrast_params} \
        -n {params.contrast_name} --outdir results/macs2_contrast/{wildcards.contrast} -B &> {log}
        """

rule macs2_contrast_control_lambda_bw:
    input:
        "results/macs2_contrast/{contrast}/{contrast_name}_control_lambda.bdg"
    output:
        bw="results/macs2_contrast/{contrast}/{contrast_name}_control_lambda.bw",
        sbdg=temp("results/macs2_contrast/{contrast}/{contrast_name}_control_lambda.s.bdg")
    params:
        mem="16000"
    threads:
        1
    priority:
        100
    log:
        "results/macs2_contrast/{contrast}/log/{contrast_name}_control_lambda.bw.log"
    benchmark:
        "results/macs2_contrast/{contrast}/log/{contrast_name}_control_lambda.bw.tsv"
    shell:
        """
        sort -k1,1 -k2,2n {input} > results/macs2_contrast/{wildcards.contrast}/{wildcards.contrast_name}_control_lambda.s.bdg 2>> {log}
        bedGraphToBigWig="singularity exec $HOME/singularity/hand_sandbox.simg bedGraphToBigWig"
        $bedGraphToBigWig results/macs2_contrast/{wildcards.contrast}/{wildcards.contrast_name}_control_lambda.s.bdg \
            {SizeFile} {output.bw} &>> {log}
        """

rule macs2_contrast_treat_pileup_bw:
    input:
        "results/macs2_contrast/{contrast}/{contrast_name}_treat_pileup.bdg"
    output:
        bw="results/macs2_contrast/{contrast}/{contrast_name}_treat_pileup.bw",
        sbdg=temp("results/macs2_contrast/{contrast}/{contrast_name}_treat_pileup.s.bdg")
    params:
        mem="16000"
    threads:
        1
    priority:
        100
    log:
        "results/macs2_contrast/{contrast}/{contrast_name}_treat_pileup.bw.log"
    benchmark:
        "results/macs2_contrast/{contrast}/{contrast_name}_treat_pileup.bw.tsv"
    shell:
        """
        sort -k1,1 -k2,2n {input} > results/macs2_contrast/{wildcards.contrast}/{wildcards.contrast_name}_treat_pileup.s.bdg 2>> {log}
        bedGraphToBigWig="singularity exec $HOME/singularity/hand_sandbox.simg bedGraphToBigWig"
        $bedGraphToBigWig results/macs2_contrast/{wildcards.contrast}/{wildcards.contrast_name}_treat_pileup.s.bdg \
            {SizeFile} {output.bw} &>> {log}
        """

### End

rule create_dag:
    params:
        mem="1000"  
        # every job has to have this defined 
        # to use snakemake --cluster 'bsub -q short -R "rusage[mem={params.mem}]" -n {threads}'
    threads:
        1
    output:
        "Workflow_DAG.all.svg"
    shell:
        "snakemake --dag targets | dot -Tsvg > {output} "


rule reset:
    shell:
        """
        rm -rf fastqc 
        snakemake --unlock
        """

