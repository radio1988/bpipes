# July17, 2021
# ChIPSeq like data analysis pipeline
# Functions:
    # fastqc
    # map, filter, bigWig, bam_qc, chip_qc
    # call peak: sample level and contrast based (read contras.csv and meta.csv)
    # meme motif
# Env:
    # source activate snakemake6
# Requirements
    # inputs in ./fastq/
    # named as {sample}.{R1,R2}.{fastq}.gz
    # e.g. A.R1.fastq.gz A.R2.fastq.gz B...
    # good format of meta.csv and contrast.csv, matching SAMPLES in config.yaml
import os    
    
from snakemake.utils import min_version
min_version("6.0")

configfile: 'config/config.yaml'
SAMPLES=config['SAMPLES']
PEAK_WIDTH=config['PEAK_WIDTH']
DATA_TYPE=config['DATA_TYPE']  # ChIP
MODE=config['MODE'] # PE
ALIGNER=config['ALIGNER']
BLACKLIST=config['BLACKLIST']
GTF=config['GTF']

from modules import parse_meta_contrast, get_treatment_bams_from_contrast, \
    get_control_bams_from_contrast, get_contrast_name_from_contrast, \
    get_narrowPeak_names_from_contrasts, get_broadPeak_names_from_contrasts, \
    get_treat_pileup_bw_names_from_contrasts, \
    get_control_lambda_bw_names_from_contrasts, \
    get_meme_peak_outname_from_contrasts, get_meme_summit_outname_from_contrasts, get_meme_summit_split_outname_from_contrasts, \
    get_narrow_count_names_from_contrasts, get_broad_count_names_from_contrasts, \
    get_signalHeatmap_ContrastPeak_outname, get_corrHeatmap_peakCount_outname, \
    get_chippeakanno_outname, get_cpm_filter_outname, get_enrichment_analysis_outname

o=parse_meta_contrast(fmeta="config/meta.csv", fcontrast="config/contrast.csv") 

def chipseq_targets(o):
    L = []
#    L.append("results/fastqc/multiqc_report.html")
#    L.append(["results/sorted_reads_qc/multiqc_report.html", "results/clean_reads_qc/multiqc_report.html"])
#    L.append(["results/clean_reads_qc/fingerprint.pdf", "results/sorted_reads_qc/fingerprint.pdf"])
#    L.append(["results/clean_reads_qc/multiBamSummary.heatmap.pdf", "results/clean_reads_qc/multiBamSummary.pca.pdf"])
#    L.append("results/clean_reads_qc/signalHeatmap/clean.all_sample.TSS.signalHeatmap.pdf")
#    L.append(get_signalHeatmap_ContrastPeak_outname(contrasts=o.contrasts, o=o))
#    L.append(["results/clean_reads_bigWig/{s}.cpm.bw".format(s=s) for s in SAMPLES])
#    L.append(["results/narrow_peaks_sample_level/{s}/{s}_clean.narrowPeak".format(s=s) for s in SAMPLES])
#    L.append(["results/narrow_peaks_sample_level/{s}/{s}_treat_pileup.bw".format(s=s) for s in SAMPLES])
#    L.append(["results/broad_peaks_sample_level/{s}/{s}_clean.broadPeak".format(s=s) for s in SAMPLES])
#    # contrast peaks
#    L.append(get_narrowPeak_names_from_contrasts(contrasts=o.contrasts, o=o))
#    L.append(get_treat_pileup_bw_names_from_contrasts(contrasts=o.contrasts, o=o))
#    L.append(get_control_lambda_bw_names_from_contrasts(contrasts=o.contrasts, o=o))
#    L.append(get_narrow_count_names_from_contrasts(contrasts=o.contrasts, o=o))
#    L.append(get_broadPeak_names_from_contrasts(contrasts=o.contrasts, o=o))
#    L.append(get_broad_count_names_from_contrasts(contrasts=o.contrasts, o=o))
#    # for all contrast peaks (narrow/broad)
#    L.append(get_cpm_filter_outname(contrasts=o.contrasts, o=o))
    L.append(get_chippeakanno_outname(contrasts=o.contrasts, o=o, PEAKTYPE=config['PEAKTYPE']))
    L.append(get_corrHeatmap_peakCount_outname(contrasts=o.contrasts, o=o, PEAKTYPE=config['PEAKTYPE']))
    L.append(get_enrichment_analysis_outname(contrasts=o.contrasts, o=o, PEAKTYPE=config['PEAKTYPE']))
    L.append(get_meme_peak_outname_from_contrasts(contrasts=o.contrasts, o=o, PEAKTYPE=config['PEAKTYPE']))
    L.append(get_meme_summit_outname_from_contrasts(contrasts=o.contrasts, PEAK_WIDTH=PEAK_WIDTH, o=o))
#    # save resources
#    L.append("resources/"+os.path.split(BLACKLIST)[1]+".gz")
#    L.append("resources/"+os.path.split(GTF)[1]+".gz")
#    L.append("Workflow_DAG.svg")
#    if config['MODE'] == 'PE':
#        L.append(["results/clean_reads_qc/fragment_size.pdf", "results/sorted_reads_qc/fragment_size.pdf"])
#        L.append(["results/clean_reads_qc/insert_size/{s}.insert_size.pdf".format(s=s) for s in SAMPLES])
#             
    return L

if DATA_TYPE == "ChIP" and MODE in ['PE', 'SE']:
    rule targets:
        input:
            chipseq_targets(o)

include: 'rules/fastqc.smk'
if ALIGNER == 'bwa':
    include: 'rules/bwa.smk'
elif ALIGNER == 'bowtie2':
    include: 'rules/bowtie2.smk'
include: 'rules/chipbamfilter.smk'
include: 'rules/bigwig.smk'
include: 'rules/bamqc.smk'
include: 'rules/chipqc.smk'
include: 'rules/signal_heatmap.smk'
include: 'rules/macs2.smk'
include: 'rules/feature_count.smk'
include: 'rules/corrHeatmap_peakCount.smk'
include: 'rules/t_vs_c_filter.smk'
include: 'rules/chippeakanno.smk'
include: 'rules/merge_tab_anno.smk'
include: 'rules/enrichment_analysis.smk'
include: 'rules/meme.smk'
include: 'rules/snakemake_misc.smk'
include: 'rules/save_resources.smk'
