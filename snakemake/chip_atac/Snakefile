configfile: "config.yaml"
SAMPLES=config["SAMPLES"]
GENOME=config["GENOME"]
INDEX=GENOME+".sa"
MQ_MIN=config["MQ_MIN"]
BIN_SIZE=config['BIN_SIZE']

# load modules (have to use """, to keep in one block)
# - alias does not work, have to use $samstat
shell.prefix("""
            #source /home/rl44w/.bash_profile
            #echo '## snake.prefix'
            HOME=/home/rl44w/
            samtools="singularity exec $HOME/singularity/hand_sandbox/ samtools"
            samstat="singularity exec $HOME/singularity/hand_sandbox samstat" # alias in .bash_profile not working in snakemake
            """)

# Requirements
# inputs in ./fastq/
# named as {sample}.{R1,R2}.{fastq,fq}.gz
# e.g. A.R1.fastq.gz A.R2.fastq.gz B...


rule all:
    input:
        # 1. everything listed here will be produced by the pipeline
        # 2. feed {sample}
        fastqc="fastqc/multiqc_report.html", # not in main workflow, so list here
        markDup=expand("markDup/{sample}.bam", sample=SAMPLES),
        Genrich=expand("Genrich/{sample}.narrowPeak", sample=SAMPLES) if config["atac"] else "Workflow_DAG.all.svg",
        MACS=expand("macs2/{sample}_peaks.narrowPeak", sample=SAMPLES),
        bam_qc=expand("bam_qc/samstat/{sample}.bam.samstat.html", sample=SAMPLES), # feed {samples}, ensure aligment 
        bamCoverage=expand("bigWig/{sample}.cpm.bw", sample=SAMPLES),
        bamPEFragmentSize="chip_qc/fragment_size.pdf",
        insert_size=expand("bam_qc/{sample}.insert_size.pdf", sample=SAMPLES),
        plotFingerprint="chip_qc/fingerprint.pdf",
        plotCorrelation="chip_qc/multiBamSummary.heatmap.pdf",
        plotPCA="chip_qc/multiBamSummary.pca.pdf",
        dag="Workflow_DAG.all.svg", # create DAG


rule fastqc:
    # don't need input, if you agree on not checking them
    # without output, output will not be created
    output:
        "fastqc/multiqc_report.html"
    params:
        mem="1000"
    threads:
        8
    log:
        "log/fastqc/fastqc.log"
    shell:
        # {input/output} don't have to be in command
        # have to load module in one block
        """
        module load fastqc/0.11.5
        mkdir -p fastqc
        mkdir -p fastqc/details
        fastqc -t {threads} fastq/*q.gz -o fastqc/details &> {log}
        multiqc fastqc/details -o fastqc &>> {log}
        """


rule bwa_index:
    input:
        GENOME
    output:
        INDEX
    shell:
        """
        bwa index -a bwtsw {input} &> {log}
        """


rule bwa_map:
    # 1min/1M reads with 16 cores
    input:
        index=INDEX,
        r1="fastq/{sample}.R1.fastq.gz",
        r2="fastq/{sample}.R2.fastq.gz",
    output:
        temp("mapped_reads/{sample}.bam")
    params:
        mem="1500"  # todo auto adjust based on {threads}, for human need 18G+ 
    conda:
        "envs/samtools.yaml"
    threads:
        16
    log:
        "log/bwa_map/{sample}.bwa.log"
    benchmark:
        "log/bwa_map/{sample}.bwa.benchmark.txt"
    shell:
        """
        bwa mem -t {threads} {GENOME} \
        {input.r1} {input.r2} \
        2> {log}| samtools view -Sb -1 -@ 2 - -o {output} &>> {log}
        """


rule samtools_sort_index:
    # 2M/min
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    params:
        mem="1200"
    conda:
        "envs/samtools.yaml"
    threads:
        4
    log:
        "log/samtools_sort/{sample}.sort.log"
    shell:
        """
        samtools --version &> {log}
        samtools sort -@ {threads} -m 1G {input} -o {output} &>> {log}
        samtools index {output} &>> {log}
        """


rule bam_qc:
    input:
        bam="markDup/{sample}.bam"
    output:
        samstat="bam_qc/samstat/{sample}.bam.samstat.html",
        idxstats="bam_qc/idxstats/{sample}.idxstats.txt",
        flagstat="bam_qc/flagstat/{sample}.flagsat.txt",
        stats="bam_qc/stats/{sample}.stats.txt"
    params:
        mem="2000"
    conda:
        "envs/samtools.yaml"
    threads:
        6
    log:
        idxstats="log/bam_qc/idxstats/{sample}.idxstats.log",
        flagstat="log/bam_qc/flagstat/{sample}.flagstat.log",
        stats="log/bam_qc/stats/{sample}.stats.log",
        samstat="log/bam_qc/samstat/{sample}.samstat.log",
    shell:
        """
      #  mkdir -p bam_qc 
      #  mkdir -p bam_qc/idxstats
      #  mkdir -p bam_qc/flagstat
      #  mkdir -p bam_qc/stats
      #  mkdir -p bam_qc/samstat
        samtools idxstats {input.bam} > {output.idxstats} 2> {log.idxstats} &
        samtools flagstat {input.bam} > {output.flagstat} 2> {log.flagstat} &
        samtools stats {input.bam} > {output.stats} 2> {log.stats} &
        $samstat {input.bam} && mv markDup/{wildcards.sample}.bam.samstat.html bam_qc/samstat > {log.samstat} 2>&1 &
        wait
        """

rule markDup:
    # same speed as bwa_map, slow
    input:
        "sorted_reads/{sample}.bam"
    output:
        # todo: rename output so that sort_by_name does not interfere with others
        bam="markDup/{sample}.bam",
        temp="markDup/{sample}.temp.bam",
        metrics="markDup/{sample}.markDup_metrics.txt",
        bai="markDup/{sample}.bam.bai",
    log:
        "log/markDup/{sample}.markDup.log"
    threads:
        2
    params:
        mem="16000",  # Used Max of 24G before
        chrM=config['chrM']
    run:
        print("Removing duplicates")
        shell("""
            module load picard/2.17.8
            PICARD=/share/pkg/picard/2.17.8/picard.jar
            
            java -Xmx30g -jar $PICARD MarkDuplicates \
            I={input} \
            O={output.temp} \
            M={output.metrics} \
            REMOVE_DUPLICATES=true \
            ASSUME_SORTED=true \
            &> {log}
            """)

        # ATAC or ChIP
        if config["atac"]:
            print("ATACseq mode")
            print("Remove chrM")
            shell("$samtools view -h {output.temp} | perl -lane 'print unless ($F[2] eq {params.chrM} and $_ != /\@/)' | $samtools sort -@ 2 -m 4G -o {output.bam}")
        else:
            print("ChIPSeq mode: No chrM filter")
            shell("mv {output.temp} {output.bam}")

        shell("$samtools index {output.bam} &>> {log}")


rule SortBamByNameForGenrich:
    input:
        "markDup/{sample}.bam"
    output:
        temp("markDupSortByName/{sample}.bam")
    conda:
      "envs/samtools.yaml"
    threads:
        2
    params:
        mem="2500"
    shell:
        "samtools sort -n -@ 2 -m 2G {input} -o {output}"


rule Genrich:
    input:
        "markDupSortByName/{sample}.bam"
    output:
        "Genrich/{sample}.narrowPeak"
    threads:
        1
    params:
        mem="16000"  # not sure yet
    run:
        if config['atac']:
            print("Genrich ATACseq mode")
            # todo: merge reps
            shell("Genrich -t {input} -o {output} -j -e config[chrM] -m 20")
        else:
            # should not exist by setting in rule 'all'
            print("Genrich ChIP mode")
            shell("Genrich -t {input} -o {output} -m 20")

rule macs2:
    input:
        "markDup/{sample}.bam"
    output:
        "macs2/{sample}_peaks.narrowPeak"
    threads:
        1
    params:
        mem="12000"
    shell:
        '''
        source activate py27
        macs2 callpeak -t {input} -q 0.05 --keep-dup all -n {wildcards.sample} --outdir macs2
        '''


rule bamCoverage:
    # for ChIP
    input:
        "markDup/{sample}.bam"
    output:
        "bigWig/{sample}.cpm.bw"
    threads:
        8
    params:
        mem="1500"  # total 6-10G
    log:
        "log/bamCoverage/{sample}.bamCoverage.log"
    shell:
        # Aim: same as our downstream filters, extensions
        """
        bamCoverage --bam {input} \
        -o  {output} \
        --numberOfProcessors {threads} \
        --outFileFormat bigwig \
        --normalizeUsing CPM \
        --minFragmentLength {config[minFragmentLength]} \
        --maxFragmentLength {config[maxFragmentLength]} \
        --binSize 10 \
        -e 150 &> {log}
        """


rule plotFingerprint:
    input:
        expand("markDup/{sample}.bam", sample=SAMPLES)
    output:
        plot="chip_qc/fingerprint.pdf",
        txt="chip_qc/fingerprint.txt",
    params:
        mem="2000"
    threads:
        6
    log:
        "log/chip_qc/fingerprint.log"
    shell:
        """
        plotFingerprint -b {input} \
            --plotFile {output.plot} \
            --outRawCounts {output.txt} \
            --plotTitle "Fingerprint Plot" \
            --smartLabels \
            --minMappingQuality {MQ_MIN} \
            --binSize {BIN_SIZE} \
            --minFragmentLength {config[minFragmentLength]} \
            --maxFragmentLength {config[maxFragmentLength]} \
            --extendReads \
            --centerReads \
            --samFlagInclude 2 \
            -p {threads} &> {log}
        """
        # --samFlagInclude 2: mate properly paired only
        # --extendReads: use mate into


rule bamPEFragmentSize:
    input:
        expand("markDup/{sample}.bam", sample=SAMPLES)
    output:
        plot="chip_qc/fragment_size.pdf",
        txt="chip_qc/fragment_size.txt"
    params:
        mem="4000"
    threads:
        4
    log:
        "log/chip_qc/fragment_size.log"
    shell:
        """
        bamPEFragmentSize \
        -hist {output.plot} \
        --outRawFragmentLengths {output.txt} \
        -T "Fragment Size Distribution" \
        --maxFragmentLength 1500 \
        -b {input} \
        -p {threads} &> {log}
        """


rule multiBamSummary:
    input:
        expand("markDup/{sample}.bam", sample=SAMPLES)
    output:
        "chip_qc/multiBamSummary.npz",
    threads:
        8
    params:
        mem="3500"
    log:
        "log/chip_qc/multiBamSummary.log"
    shell:
        """
        multiBamSummary bins \
        -b {input} \
        -o {output} \
        --binSize {BIN_SIZE} \
        --smartLabels \
        -p {threads} \
        --minMappingQuality {MQ_MIN} \
        --minFragmentLength {config[minFragmentLength]} \
        --maxFragmentLength {config[maxFragmentLength]} \
        -e \
        --samFlagInclude 2 &> {log}
        """
        

rule plotCorrelation:
    input:
        "chip_qc/multiBamSummary.npz",
    output:
        "chip_qc/multiBamSummary.heatmap.pdf"
    threads:
        1
    params:
        mem="12000"
    log:
        "log/chip_qc/plotCorrelation.log"
    shell:
        """
        plotCorrelation \
        -in {input} \
        --corMethod pearson --skipZeros \
        --whatToPlot heatmap \
        -T 'Pearson Corr Between Bins' \
        --removeOutliers \
        -o {output} &> {log}
        """

rule plotPCA:
    input:
        "chip_qc/multiBamSummary.npz",
    output:
        "chip_qc/multiBamSummary.pca.pdf"
    threads:
        1
    params:
        mem="20000"
    log:
        "log/chip_qc/plotPCA.log"
    shell:
        """
        plotPCA \
        --corData {input} \
        --plotFile {output} &> {log}
        """

rule CollectInsertSizeMetrics:
    input:
        "markDup/{sample}.bam"
    output:
        txt="bam_qc/{sample}.insert_size.txt",
        pdf="bam_qc/{sample}.insert_size.pdf"
    threads:
        1
    params:
        mem="16000"
    shell:
        """
        module load picard/2.17.8
        PICARD=/share/pkg/picard/2.17.8/picard.jar

        java -Xmx15g -jar $PICARD CollectInsertSizeMetrics \
        I={input} \
        O={output.txt} \
        H={output.pdf}
        """ 




rule epic2:
    input:
        "markDup/{sample}.bam"
    output:
        "epic2/{sample}.peak"
    threads:
        4
    params:
        mem="2000"
    shell:
        """
        epic2 -h
        """

rule create_dag:
    params:
        mem="1000"  
        # every job has to have this defined 
        # to use snakemake --cluster 'bsub -q short -R "rusage[mem={params.mem}]" -n {threads}'
    threads:
        1
    output:
        "Workflow_DAG.all.svg"
    log:
        "log/create_dag/Workflow_DAG.all.svg.log"
    shell:
        "snakemake --dag all | dot -Tsvg > {output} 2> {log}"


rule reset:
    shell:
        '''
        rm -rf fastqc bam_qc/ mapped_reads/ sorted_reads/ bigWig/ 
        rm -rf lsf.log *svg *html log nohup.out chip_qc/
        rm -rf genrich/ Genrich/ macs2/ 
        rm -rf markDupSortByName/ markDup/
        snakemake --unlock
        '''
