# BWA for ChIP/ATAC-seq
# TODO: QC deeptools

configfile: "config.yaml"
d = config['SAMPLES']
names = list(d.keys())
# reads = list(d.values())
reads_ = ["fastq/B.R1.fastq.gz fastq/B.R2.fastq.gz", "fastq/A.R1.fastq.gz fastq/A.R2.fastq.gz"]
print(reads_)
print(names)


print(config["CPU"])
print(config["RAM"])
print("config.SAMPLES: ", config['SAMPLES']) # {'B': ['fastq/B.R1.fastq.gz', 'fastq/B.R2.fastq.gz'], 'A': ['fastq/A.R1.fastq.gz', 'fastq/A.R2.fastq.gz']}
# k = list(config['SAMPLES'].keys())
# print("keys: ", k) #  ['B', 'A']
# v = list(config['SAMPLES'].values())
# print("values: ", v) # [['fastq/B.R1.fastq.gz', 'fastq/B.R2.fastq.gz'], ['fastq/A.R1.fastq.gz', 'fastq/A.R2.fastq.gz']]
# print(v[0][0]) # fastq/B.R1.fastq.gz
# print(v[0][1]) # fastq/B.R2.fastq.gz
for k,v in sorted(d.items()):
	print(k, v[0], v[1])	# good
	print(k, d[k][0], d[k][1])	# better


rule fastqc:
	input:
		[d[k] for k in sorted(d)]  # same as expand(); R1 and R2
	output:
		directory("fastqc/details/")  # directory not working well, directory("fastqc/")
	threads:
		6
	log:
		fastqc="logs/fastqc/fastqc.log",
		multiqc="logs/fastqc/multiqc.log"
	run:
		shell("echo 'fastqc inputs: ' {input}")
		shell("fastqc -t {threads} {input} --outdir {output} &> {log.fastqc}")
		shell("multiqc --force -o fastqc -n multiqc {output} &> {log.multiqc}")
		shell("rm -rf {output}*zip")


rule bwa_mapping:
	# input:
		# genome=config["genome"]
		# R1=[d[k][0] for k in sorted(d)],
		# # R1=["{r1}" for r1 in d[k][0]]
		# R2=[d[k][1] for k in sorted(d)],
		# reads=[d[k] for k in sorted(d)]
		# reads=expand('{v}, v=d.values()')
	params:
		genome=config["genome"],
		reads=reads_	
	output:
		# expand("bwa/{k}.bam", k=d)  # have to use expand, not list comprehension
		names
	threads:
		config["CPU"]
	shell:
		# """
		# echo {params.reads}
		# echo {output}
		# """
		# """
		# echo {input.R1}
		# echo {input.R2}
		# echo {input.genome} > {output}
		# """
		"bwa mem -t {threads} "
		"{params.genome} {params.reads}"
		# " | samtools view -Sb - "
		" | samtools sort -@ 2 -m 1G -o {output}"
		" && samtools index {output}"


# rule all:
#     input:
#         directory("fastqc/details/"), # fastqc
  #   output:
  #   	"report.html"
  #   shell: 
  #   	"snakemake --dag |dot -Tsvg > workflow.svg"
		# # " && snakemake --report {output}"


# rule fastqc:
# 	input:
# 		expand("fastq/{name}.*.gz", name=config["NAMES"])
# 	output:
# 		directory("fastqc/details/")  # directory not working well, directory("fastqc/")
# 	threads:
# 		6
# 	log:
# 		fastqc="logs/fastqc/fastqc.log",
# 		multiqc="logs/fastqc/multiqc.log"
# 	run:
# 		shell("fastqc -t {threads} {input} --outdir {output} &> {log.fastqc}")
# 		shell("multiqc --force -o fastqc -n multiqc {output} &> {log.multiqc}")
# 		shell("rm -rf {output}*zip")

def get_r1(wildcards):
	return sorted(glob.glob(wildcards.sample + "*R1.*q.gz"))


rule fastqc_wildcard:
	input:
		"fastq/{name}.R1.fastq.gz"
	output:
		directory("fastqc/details/")  # directory not working well, directory("fastqc/")
	threads:
		6
	log:
		fastqc="logs/fastqc/fastqc.log",
		multiqc="logs/fastqc/multiqc.log"
	run:
		shell("fastqc -t {threads} {input} --outdir {output} &> {log.fastqc}")
		shell("multiqc --force -o fastqc -n multiqc {output} &> {log.multiqc}")
		shell("rm -rf {output}*zip")


# rule bwa_mapping:
# 	input:
# 		genome=config["genome"],
# 		# R1=expand("fastq/{r1}.fastq.gz", r1=config["READ1S"]),
# 		# R2=expand("fastq/{r2}.fastq.gz", r2=config["READ2S"])
# 		R1="fastq/test.R1.fastq.gz",
# 		R2="fastq/test.R2.fastq.gz"
# 	output:
# 		"bwa/test.bam"
# 	threads:
# 		12
# 	shell:
# 		"bwa mem -t {threads} "
# 		"{input.genome} {input.R1} {input.R2}"
# 		# " | samtools view -Sb - "
# 		" | samtools sort -@ 2 -m 1G -o {output}"
# 		" && samtools index {output}"


# rule samtools_stats:
# 	input:
# 		"bwa/config["sample"].bam"
# 	output:
# 		stats="bwa/stats/config["sample"].bam.stats.txt",
# 		flagstats="bwa/flagstats/config["sample"].flagstats.txt",
# 		idxstats="bwa/idxstats/config["sample"].idxstats.txt"
# 	shell:
# 		"samtools stats {input} > {output.stats}"
# 		" && samtools flagstats {input} > {output.flagstats}"
# 		" && samtools idxstats {input} > {output.idxstats}"


# rule report:
# 	input: "bwa/idxstats/{sample}.idxstats.txt"
# 	output: "report.html"
# 	shell:
# 		"snakemake --dag |dot -Tsvg > workflow.svg"
# 		" && snakemake --report {output}"

