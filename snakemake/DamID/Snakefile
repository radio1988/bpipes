# Dec. 22, 2020
# DamID pipeline
# Functions: 
    # fastqc
    # map, filter (DamID specific), bam_qc
    # call peak (DamID specific): sample level and contrast based
    # bigwig (macs2_DamID signal based)
# Env: 
    # source activate damid
# Requirements
    # inputs in ./fastq/
    # named as {sample}.{R1,R2}.{fastq,fq}.gz
    # e.g. A.R1.fastq.gz A.R2.fastq.gz B...
    # good format of meta.csv and contrast.csv, matching SAMPLES in config.yaml


from snakemake.utils import min_version
from damid_modules import parse_meta_contrast, get_treatment_bams_from_contrast, \
    get_control_bams_from_contrast, get_contrast_name_from_contrast, \
    get_treat_pileup_bdg_names_from_contrasts, get_treat_pileup_bw_names_from_contrasts


### parse and prepare
min_version("5.17.0")

configfile: "config.yaml"
SAMPLES=config["SAMPLES"]
GENOME=config["GENOME"]
INDEX=GENOME+".sa"
MQ_MIN=config["MQ_MIN"]
BIN_SIZE=config["BIN_SIZE"]
GSIZE=config["GSIZE"]
SizeFile=config["SizeFile"]

o=parse_meta_contrast(fmeta="meta.csv", fcontrast="contrast.csv") 
# print("parse_meta_contrast_obj:", vars(o))
# {'contrast2contrast_name': {'contrast1': 'G1_vs_ctrl', 'contrast2': 'G2_vs_ctrl', 'contrast3': 'G1_G2_vs_ctrl'}, 
# 'contrast2treatmentSamples': {'contrast1': ['2-1_S2', '2-2_S3', '2-3_S4'], 'contrast2': ['3-1_S5', '3-2_S6', '3-3_S7'], 'contrast3': ['2-1_S2', '2-2_S3', '2-3_S4', '3-1_S5', '3-2_S6', '3-3_S7']}, 
# 'contrast2controlSamples': {'contrast1': ['1-2_S1'], 'contrast2': ['1-2_S1'], 'contrast3': ['1-2_S1']}}

ruleorder: macs2_DamID_contrast_treat_pileup_bw > macs2_DamID_sample_treat_pileup_bw 
# Learn: To Avoid AmbiguousRuleException:
# Rules macs2_DamID_contrast_treat_pileup_bw and macs2_DamID_sample_treat_pileup_bw are ambiguous for the file macs2_DamID_sample/1-2_S1_treat_pileup.bw.
# Consider starting rule output with a unique prefix, constrain your wildcards, or use the ruleorder directive.
# Wildcards:
#     macs2_DamID_contrast_treat_pileup_bw: sample=1-2_S1
#     macs2_DamID_sample_treat_pileup_bw: sample=1-2_S1
# Expected input files:
#     macs2_DamID_contrast_treat_pileup_bw: macs2_DamID_sample/1-2_S1_treat_pileup.bdg
#     macs2_DamID_sample_treat_pileup_bw: macs2_DamID_sample/1-2_S1_treat_pileup.bdgExpected output files:
#     macs2_DamID_contrast_treat_pileup_bw: macs2_DamID_sample/1-2_S1_treat_pileup.bw
#     macs2_DamID_sample_treat_pileup_bw: macs2_DamID_sample/1-2_S1_treat_pileup.bw

shell.prefix("""
            HOME=/home/rl44w/
            samtools="singularity exec $HOME/singularity/hand_sandbox.simg samtools"
            bedGraphToBigWig="singularity exec $HOME/singularity/hand_sandbox.simg bedGraphToBigWig"
            """)


### Workflow
rule targets:
    input:
        # 1. everything listed here will be produced by the pipeline
        # 2. feed {sample}
        macs2_DamID_sample=expand("macs2_DamID_sample/{sample}_peaks.narrowPeak", sample=SAMPLES),
        macs2_DamID_sample_treat_pileup_bw=expand("macs2_DamID_sample/{sample}_treat_pileup.bw", sample=SAMPLES),
        macs2_DamID_contrast=get_treat_pileup_bdg_names_from_contrasts(contrasts=o.contrasts, o=o), 
        macs2_DamID_contrast_treat_pileup_bw=get_treat_pileup_bw_names_from_contrasts(contrasts=o.contrasts, o=o),
        # Learn: Good trick to use tagets input to do contrast2contrast_name and more
        fastqc="fastqc/multiqc_report.html", # not in main workflow, so list here
        sorted_reads_bam_qc=expand("sorted_reads_bam_qc/stats/{sample}.stats.txt", sample=SAMPLES),
        multiqc_sorted_reads="sorted_reads_bam_qc/stats/multiqc_report.html",
        multiqc_DamID_reads="DamID_reads_bam_qc/stats/multiqc_report.html",
        DamID_reads_bam_qc=expand("DamID_reads_bam_qc/stats/{sample}.stats.txt", sample=SAMPLES),

        qc1="DamID_reads_bam_qc/fingerprint.pdf",
        #qc2="DamID_reads_bam_qc/fragment_size.pdf",
        qc3="DamID_reads_bam_qc/multiBamSummary.heatmap.pdf",
        qc4="DamID_reads_bam_qc/multiBamSummary.pca.pdf",
        qc5=expand("DamID_reads_bam_qc/{sample}.insert_size.pdf", sample=SAMPLES),
        dag="Workflow_DAG.all.svg"


rule fastqc:
    # don't need input, if you agree on not checking them
    # without output, output will not be created
    output:
        "fastqc/multiqc_report.html"
    params:
        mem="1000"
    threads:
        8
    log:
        "log/fastqc/fastqc.log"
    shell:
        # {input/output} don't have to be in command
        # have to load module in one block
        """
        module load fastqc/0.11.5
        mkdir -p fastqc
        mkdir -p fastqc/details
        fastqc -t {threads} fastq/*q.gz -o fastqc/details &> {log}
        multiqc fastqc/details -o fastqc &>> {log}
        """


rule bwa_index:
    input:
        GENOME
    output:
        INDEX
    params:
        mem="8000"
    threads:
        2
    log:
        "log/bwa_index.log"
    shell:
        """
        bwa index -a bwtsw {input} &> {log}
        """


rule bwa_map:
    # 1min/1M reads with 16 cores
    input:
        index=INDEX,
        r1="fastq/{sample}.R1.fastq.gz",
        r2="fastq/{sample}.R2.fastq.gz",
    output:
        temp("mapped_reads/{sample}.bam")
    params:
        mem="1500"  # todo auto adjust based on {threads}, for human need 18G+ 
    threads:
        16
    log:
        "mapped_reads/{sample}.bam.log"
    benchmark:
        "mapped_reads/{sample}.bam.tsv"
    shell:
        """
        bwa mem -t {threads} {GENOME} \
        {input.r1} {input.r2} \
        2> {log}| samtools view -Sb -1 -@ 2 - -o {output} &>> {log}
        """


rule samtools_sort_index:
    # 2M/min
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    params:
        mem="1200"
    threads:
        4
    log:
        "log/samtools_sort/{sample}.sort.log"
    shell:
        """
        samtools --version &> {log}
        samtools sort -@ {threads} -m 1G {input} -o {output} &>> {log}
        samtools index {output} &>> {log}
        """


rule DamID_filter:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "DamID_reads/{sample}.bam"
    log:
        "DamID_reads/{sample}.log"
    benchmark:
        "DamID_reads/{sample}.benchmark.tsv"
    params:
            mem="16000"
    threads:
        1
    shell:
        """
        # need samtools/1.9
        python scripts/filter_bam.py {input} {GENOME} GATC {output} &> {log}
        """


rule sorted_reads_bam_qc:
    input:
        bam="sorted_reads/{sample}.bam"
    output:
        idxstats="sorted_reads_bam_qc/idxstats/{sample}.idxstats.txt",
        flagstat="sorted_reads_bam_qc/flagstat/{sample}.flagstat.txt",
        stats="sorted_reads_bam_qc/stats/{sample}.stats.txt"
    params:
        mem="3000"
    threads:
        1
    log:
        idxstats="sorted_reads_bam_qc/idxstats/{sample}.idxstats.log",
        flagstat="sorted_reads_bam_qc/flagstat/{sample}.flagstat.log",
        stats="sorted_reads_bam_qc/stats/{sample}.stats.log"
    shell:
        """
        samtools idxstats {input.bam} > {output.idxstats} 2> {log.idxstats} 
        samtools flagstat {input.bam} > {output.flagstat} 2>> {log.flagstat} 
        samtools stats {input.bam} > {output.stats} 2>> {log.stats} 
        """

rule multiQC_sorted_reads:
    input:
        stats=expand("sorted_reads_bam_qc/stats/{sample}.stats.txt", sample=SAMPLES),
        idxstats=expand("sorted_reads_bam_qc/idxstats/{sample}.idxstats.txt", sample=SAMPLES),
        flagstat=expand("sorted_reads_bam_qc/flagstat/{sample}.flagstat.txt", sample=SAMPLES),
    output:
        "sorted_reads_bam_qc/stats/multiqc_report.html",
        "sorted_reads_bam_qc/idxstats/multiqc_report.html",
        "sorted_reads_bam_qc/flagstat/multiqc_report.html",
    params:
        mem="3000"
    threads:
        1
    log:
        "sorted_reads_bam_qc/multiqc.log"
    shell:
        """
        multiqc {input.stats} &> {log}
        multiqc {input.idxstats}   &>> {log}
        multiqc {input.flagstat} &>> {log}
        """

rule DamID_reads_bam_qc:
    input:
        bam="DamID_reads/{sample}.bam"
    output:
        idxstats="DamID_reads_bam_qc/idxstats/{sample}.idxstats.txt",
        flagstat="DamID_reads_bam_qc/flagstat/{sample}.flagstat.txt",
        stats="DamID_reads_bam_qc/stats/{sample}.stats.txt"
    params:
        mem="2000"
    threads:
        1
    log:
        idxstats="DamID_reads_bam_qc/idxstats/{sample}.idxstats.log",
        flagstat="DamID_reads_bam_qc/flagstat/{sample}.flagstat.log",
        stats="DamID_reads_bam_qc/stats/{sample}.stats.log"
    shell:
        """
        samtools idxstats {input.bam} > {output.idxstats} 2> {log.idxstats} 
        samtools flagstat {input.bam} > {output.flagstat} 2>> {log.flagstat} 
        samtools stats {input.bam} > {output.stats} 2>> {log.stats} 
        """

rule multiQC_DamID_reads:
    input:
        stats=expand("DamID_reads_bam_qc/stats/{sample}.stats.txt", sample=SAMPLES),
        idxstats=expand("DamID_reads_bam_qc/idxstats/{sample}.idxstats.txt", sample=SAMPLES),
        flagstat=expand("DamID_reads_bam_qc/flagstat/{sample}.flagstat.txt", sample=SAMPLES),
    output:
        "DamID_reads_bam_qc/stats/multiqc_report.html",
        "DamID_reads_bam_qc/idxstats/multiqc_report.html",
        "DamID_reads_bam_qc/flagstat/multiqc_report.html",
    params:
        mem="3000"
    threads:
        1
    log:
        "sorted_reads_bam_qc/multiqc.log"
    shell:
        """
        multiqc {input.stats} &> {log}
        multiqc {input.idxstats}   &>> {log}
        multiqc {input.flagstat} &>> {log}
        """

rule plotFingerprint:
    input:
        expand("DamID_reads/{sample}.bam", sample=SAMPLES)
    output:
        plot="DamID_reads_bam_qc/fingerprint.pdf",
        txt="DamID_reads_bam_qc/fingerprint.txt",
    params:
        mem="2000"
    threads:
        6
    log:
        "DamID_reads_bam_qc/fingerprint.log"
    shell:
        """
        plotFingerprint -b {input} \
            --plotFile {output.plot} \
            --outRawCounts {output.txt} \
            --plotTitle "Fingerprint Plot" \
            --smartLabels \
            --minMappingQuality {MQ_MIN} \
            --binSize {BIN_SIZE} \
            --minFragmentLength {config[minFragmentLength]} \
            --maxFragmentLength {config[maxFragmentLength]} \
            --extendReads \
            --centerReads \
            --samFlagInclude 2 \
            -p {threads} &> {log}
        """
        # --samFlagInclude 2: mate properly paired only
        # --extendReads: use mate into


rule bamPEFragmentSize:
    input:
        expand("DamID_reads/{sample}.bam", sample=SAMPLES)
    output:
        plot="DamID_reads_bam_qc/fragment_size.pdf",
        txt="DamID_reads_bam_qc/fragment_size.txt"
    params:
        mem="4000"
    threads:
        4
    log:
        "DamID_reads_bam_qc/fragment_size.log"
    shell:
        """
        bamPEFragmentSize \
        -hist {output.plot} \
        --outRawFragmentLengths {output.txt} \
        -T "Fragment Size Distribution" \
        --maxFragmentLength 2000 \
        -b {input} \
        -p {threads} &> {log}
        """


rule multiBamSummary:
    input:
        expand("DamID_reads/{sample}.bam", sample=SAMPLES)
    output:
        "DamID_reads_bam_qc/multiBamSummary.npz",
    params:
        mem="3500"
    threads:
        8
    log:
        "DamID_reads_bam_qc/multiBamSummary.log"
    shell:
        """
        multiBamSummary bins \
        -b {input} \
        -o {output} \
        --binSize {BIN_SIZE} \
        --smartLabels \
        -p {threads} \
        --minMappingQuality {MQ_MIN} \
        --minFragmentLength {config[minFragmentLength]} \
        --maxFragmentLength {config[maxFragmentLength]} \
        -e \
        --samFlagInclude 2 &> {log}
        """
        

rule plotCorrelation:
    input:
        "DamID_reads_bam_qc/multiBamSummary.npz",
    output:
        "DamID_reads_bam_qc/multiBamSummary.heatmap.pdf"
    params:
        mem="20000"
    threads:
        1
    log:
        "DamID_reads_bam_qc/plotCorrelation.log"
    shell:
        """
        plotCorrelation \
        -in {input} \
        --corMethod pearson --skipZeros \
        --whatToPlot heatmap \
        -T 'Pearson Corr Between Bins' \
        --removeOutliers \
        -o {output} &> {log}
        """

rule plotPCA:
    input:
        "DamID_reads_bam_qc/multiBamSummary.npz",
    output:
        "DamID_reads_bam_qc/multiBamSummary.pca.pdf"
    params:
        mem="20000"
    threads:
        1
    log:
        "DamID_reads_bam_qc/plotPCA.log"
    shell:
        """
        plotPCA \
        --corData {input} \
        --plotFile {output} &> {log}
        """

rule CollectInsertSizeMetrics:
    input:
        "DamID_reads/{sample}.bam"
    output:
        txt="DamID_reads_bam_qc/{sample}.insert_size.txt",
        pdf="DamID_reads_bam_qc/{sample}.insert_size.pdf"
    params:
            mem="16000"
    threads:
        1
    shell:
        """
        module load picard/2.17.8
        PICARD=/share/pkg/picard/2.17.8/picard.jar

        java -Xmx15g -jar $PICARD CollectInsertSizeMetrics \
        I={input} \
        O={output.txt} \
        H={output.pdf}
        """ 

rule macs2_DamID_sample:
    # for each sample
    # todo: contrast
    input:
        "DamID_reads/{sample}.bam"
    output:
        "macs2_DamID_sample/{sample}_peaks.narrowPeak", 
        temp("macs2_DamID_sample/{sample}_treat_pileup.bdg"),
        temp("macs2_DamID_sample/{sample}_control_lambda.bdg")
    params:
        mem="8000"    
    threads:
        4
    conda:
        "scripts/macs2.yaml"
    log:
        "macs2_DamID_sample/{sample}_peaks.narrowPeak.log"
    benchmark:
        "macs2_DamID_sample/{sample}_peaks.narrowPeak.tsv"
    shell:
        """
         macs2 callpeak -t {input} \
         -f BAM --nomodel --shift -60 --extsize 100 -g {GSIZE} -q 0.05 --keep-dup all \
         -n {wildcards.sample} --outdir macs2_DamID_sample -B &> {log}
        """

rule macs2_DamID_sample_treat_pileup_bw:
    input:
        "macs2_DamID_sample/{sample}_treat_pileup.bdg"
    output:
        bw="macs2_DamID_sample/{sample}_treat_pileup.bw",
        sbdg=temp("macs2_DamID_sample/{sample}_treat_pileup.s.bdg")
    params:
        mem="16000"
    threads:
        1
    log:
        "macs2_DamID_sample/{sample}_treat_pileup.bw.log"
    benchmark:
        "macs2_DamID_sample/{sample}_treat_pileup.bw.tsv"
    priority:
        100
    shell:
        """
        sort -k1,1 -k2,2n {input} > {output.sbdg} 2> {log}
        bedGraphToBigWig="singularity exec $HOME/singularity/hand_sandbox.simg bedGraphToBigWig"
        $bedGraphToBigWig macs2_DamID_sample/{wildcards.sample}_treat_pileup.s.bdg {SizeFile} {output.bw} &>> {log}
        """

# rule macs2_site_peak2gtf:
#     input:
#         "macs2_site/{sample}_peaks.narrowPeak"
#     output:
#         "macs2_site/{sample}_peaks.gtf"
#     threads:
#         1
#     params:
#         mem="2000"
#     log:
#         "log/macs2_site/peak2gtf/{sample}.log"
#     shell:
#         """
#         perl scripts/peak2gtf.pl {input} > {output} 
#         """

# rule macs_site_count:
#     input:
#         bam="cleanBam/{sample}.bam",
#         gtf="macs2_site/{sample}_peaks.gtf"
#     output:
#         "macs2_site/{sample}.count.txt"
#     threads:
#         4
#     params:
#         mem="4000"
#     shell:
#         """
#         featureCounts -a {input.gtf} -o {output} \
#         -T {threads} -g gene_id -t peak -s 0 -p -B -C -d 38 -D 2000 \
#         -Q 20 --minOverlap 1 --fracOverlap 0 \
#         {input.bam}
#         """

    

# rule bamCoverage:
#     # for ChIP
#     input:
#         "cleanBam/{sample}.bam"
#     output:
#         "bigWig/{sample}.cpm.bw"
#     threads:
#         8
#     params:
#         mem="1500"  # total 6-10G
#     log:
#         "log/bamCoverage/{sample}.bamCoverage.log"
#     shell:
#         # Aim: same as our downstream filters, extensions
#         """
#         bamCoverage --bam {input} \
#         -o  {output} \
#         --numberOfProcessors {threads} \
#         --outFileFormat bigwig \
#         --normalizeUsing CPM \
#         --minFragmentLength {config[minFragmentLength]} \
#         --maxFragmentLength {config[maxFragmentLength]} \
#         --binSize 10 \
#         -e 150 &> {log}
#         """

### macs2_DamID_contrast ### 
rule macs2_DamID_contrast:
    """
    For each contrast

    MACS2: 
    will concatenate all control bam files and treatment bam files anyway, 
    so no need to collapse tech-reps
    """
    input:
        treatment=lambda wildcards: get_treatment_bams_from_contrast(contrast=wildcards.contrast, o=o),
        control=lambda wildcards: get_control_bams_from_contrast(contrast=wildcards.contrast, o=o),
    output:
        # lambda wildcards: get_contrast_name_from_contrast(contrast=wildcards.contrast)
        # "macs2_DamID_contrast/{contrast}/{contrast_name}_peaks.narrowPeak", 
        # # e.g. "macs2_DamID_contrast/contrast1/G1_vs_ctrl_peaks.narrowPeak"
        temp("macs2_DamID_contrast/{contrast}/{contrast_name}_treat_pileup.bdg"),
        temp("macs2_DamID_contrast/{contrast}/{contrast_name}_control_lambda.bdg")
    params:
        contrast_name=lambda wildcards: get_contrast_name_from_contrast(contrast=wildcards.contrast, o=o),
        mem="8000"
    threads:
        4        
    conda:
        "scripts/macs2.yaml"
    log:
        "macs2_DamID_contrast/{contrast}/{contrast_name}.macs2_DamID.log"
    benchmark:
        "macs2_DamID_contrast/{contrast}/{contrast_name}.macs2_DamID.tsv"
    shell:
        """
        macs2 callpeak -t {input.treatment} -c {input.control} \
        -f BAM --nomodel --shift -60 --extsize 100 -g {GSIZE} -q 0.05 --keep-dup all \
        -n {params.contrast_name} --outdir macs2_DamID_contrast/{wildcards.contrast} -B &> {log}
        """


rule macs2_DamID_contrast_treat_pileup_bw:
    input:
        "macs2_DamID_contrast/{contrast}/{contrast_name}_treat_pileup.bdg"
    output:
        bw="macs2_DamID_contrast/{contrast}/{contrast_name}_treat_pileup.bw",
        sbdg=temp("macs2_DamID_contrast/{contrast}/{contrast_name}_treat_pileup.s.bdg")
    params:
        mem="16000"
    threads:
        1
    priority:
        100
    log:
        "macs2_DamID_contrast/{contrast}/{contrast_name}_treat_pileup.bw.log"
    benchmark:
        "macs2_DamID_contrast/{contrast}/{contrast_name}_treat_pileup.bw.tsv"
    shell:
        """
        sort -k1,1 -k2,2n {input} > macs2_DamID_contrast/{wildcards.contrast}/{wildcards.contrast_name}_treat_pileup.s.bdg 2>> {log}
        bedGraphToBigWig="singularity exec $HOME/singularity/hand_sandbox.simg bedGraphToBigWig"
        $bedGraphToBigWig macs2_DamID_contrast/{wildcards.contrast}/{wildcards.contrast_name}_treat_pileup.s.bdg \
            {SizeFile} {output.bw} &>> {log}
        """

rule create_dag:
    params:
        mem="1000"  
        # every job has to have this defined 
        # to use snakemake --cluster 'bsub -q short -R "rusage[mem={params.mem}]" -n {threads}'
    threads:
        1
    output:
        "Workflow_DAG.all.svg"
    log:
        "log/create_dag/Workflow_DAG.all.svg.log"
    shell:
        "snakemake --dag all | dot -Tsvg > {output} 2> {log}"


rule reset:
    shell:
        """
        rm -rf fastqc 
        snakemake --unlock
        """

